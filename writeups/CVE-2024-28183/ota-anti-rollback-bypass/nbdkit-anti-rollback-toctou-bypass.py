import sys, os, io
import nbdkit

sys.path.append(os.path.join(os.path.dirname(__file__), './'))
from esploit_utils import *
import esploit_utils as esp_consts

required_config_keys = {
    'BOOTLOADER_IMAGE': 'file',
    'HELLO_WORLD_VER0_IMAGE': 'file'
}

FLASH_DATA = bytearray(0x100000 * 8)
PARTITION_TABLE = gen_partition_table([
    (esp_consts.PART_TYPE_DATA, esp_consts.PART_SUBTYPE_DATA_OTA, 0x15000, 0x2000, b'otadata'),
    (esp_consts.PART_TYPE_APP, esp_consts.PART_SUBTYPE_OTA_FLAG | 0x0, 0x20000, 0x100000, b'ota_0'),
    (esp_consts.PART_TYPE_APP, esp_consts.PART_SUBTYPE_OTA_FLAG | 0x1, 0x120000, 0x100000, b'ota_1'),
])
OTA_DATA  = gen_ota_select_entry(1, b'\xff' * 20, esp_consts.ESP_OTA_IMG_VALID)
OTA_DATA += gen_ota_select_entry(2, b'\xff' * 20, esp_consts.ESP_OTA_IMG_INVALID)

# ========== nbdkit boilerplate ==========
API_VERSION = 2

for k in required_config_keys:
    globals()[k] = None

def config(key, value):
    if key in required_config_keys:
        if required_config_keys[key] == 'file':
            globals()[key] = __builtins__.open(os.path.abspath(value), 'rb').read()
        else:
            raise RuntimeError(f'Unknown config value type {required_config_keys[key]} for config {key}')

def config_complete():
    for k in required_config_keys:
        if globals()[k] is None:
            raise RuntimeError(f'{k} is a specified config value but was not set')

def thread_model():
    return nbdkit.THREAD_MODEL_SERIALIZE_ALL_REQUESTS

def open(readonly):
    initialise_flash_data()
    return {}

def get_size(h):
    return len(FLASH_DATA)

# ========== flash abstractions ==========
def initialise_flash_data():
    global FLASH_DATA
    FLASH_DATA[0x1000:0x1000+len(BOOTLOADER_IMAGE)] = BOOTLOADER_IMAGE
    FLASH_DATA[0x10000:0x10000+len(PARTITION_TABLE)] = PARTITION_TABLE
    FLASH_DATA[0x15000:0x15000+len(OTA_DATA)] = OTA_DATA
    FLASH_DATA[0x20000:0x20000+len(HELLO_WORLD_VER0_IMAGE)] = HELLO_WORLD_VER0_IMAGE
    app_desc = gen_app_desc(10, b'asdf', b'asdf', b'asdf', b'asdf', b'asdf')
    FLASH_DATA[0x20000+32:0x20000+32+len(app_desc)] = app_desc # +32 for image header / segment header

cnt = 0
def pread(h, buf, offset, flags):
    global cnt

    # TOCTOU: replace app image after checks
    if offset == 0x20000:
        cnt += 1
        nbdkit.debug(f'Flash read request for 0x20000: {cnt = }')
        if cnt == 6:
            FLASH_DATA[0x20000:0x20000+len(HELLO_WORLD_VER0_IMAGE)] = HELLO_WORLD_VER0_IMAGE

    for i in range(min(len(buf), len(FLASH_DATA) - offset)):
        buf[i] = FLASH_DATA[offset+i]

def pwrite(h, buf, offset, flags):
    global FLASH_DATA
    FLASH_DATA[offset:offset+len(buf)] = bytes(buf)
